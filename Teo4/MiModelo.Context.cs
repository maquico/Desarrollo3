//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Teo4
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyDATAEntities1 : DbContext
    {
        public MyDATAEntities1()
            : base("name=MyDATAEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblClientes> tblClientes { get; set; }
        public virtual DbSet<tblTransaccion> tblTransaccion { get; set; }
    
        public virtual ObjectResult<SP_GetCliente_Result> SP_GetCliente(Nullable<int> tipoDocumento, string documento)
        {
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCliente_Result>("SP_GetCliente", tipoDocumentoParameter, documentoParameter);
        }
    
        public virtual int SP_InsertarCliente(string nombres, string apellidos, Nullable<System.DateTime> fechaNacimiento, string comentario, string sexo, Nullable<int> tipoDocumento, string documento, Nullable<decimal> balance)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarCliente", nombresParameter, apellidosParameter, fechaNacimientoParameter, comentarioParameter, sexoParameter, tipoDocumentoParameter, documentoParameter, balanceParameter);
        }
    
        public virtual int SP_InsertarTransaccion(string descripcion, Nullable<int> tipoTransaccion, Nullable<int> tipoDocumento, string documento, Nullable<decimal> monto, string debitoCredito, string oficina)
        {
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var tipoTransaccionParameter = tipoTransaccion.HasValue ?
                new ObjectParameter("TipoTransaccion", tipoTransaccion) :
                new ObjectParameter("TipoTransaccion", typeof(int));
    
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var debitoCreditoParameter = debitoCredito != null ?
                new ObjectParameter("DebitoCredito", debitoCredito) :
                new ObjectParameter("DebitoCredito", typeof(string));
    
            var oficinaParameter = oficina != null ?
                new ObjectParameter("Oficina", oficina) :
                new ObjectParameter("Oficina", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarTransaccion", descripcionParameter, tipoTransaccionParameter, tipoDocumentoParameter, documentoParameter, montoParameter, debitoCreditoParameter, oficinaParameter);
        }
    
        public virtual int SP_UpsertCliente(string nombres, string apellidos, Nullable<System.DateTime> fechaNacimiento, string comentario, string sexo, Nullable<int> tipoDocumento, string documento, Nullable<decimal> balance, Nullable<int> tipoTransaccion, Nullable<decimal> monto)
        {
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(int));
    
            var documentoParameter = documento != null ?
                new ObjectParameter("Documento", documento) :
                new ObjectParameter("Documento", typeof(string));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var tipoTransaccionParameter = tipoTransaccion.HasValue ?
                new ObjectParameter("TipoTransaccion", tipoTransaccion) :
                new ObjectParameter("TipoTransaccion", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpsertCliente", nombresParameter, apellidosParameter, fechaNacimientoParameter, comentarioParameter, sexoParameter, tipoDocumentoParameter, documentoParameter, balanceParameter, tipoTransaccionParameter, montoParameter);
        }
    }
}
